/*-
 * #%L
 * JSQLParser library
 * %%
 * Copyright (C) 2004 - 2023 JSQLParser
 * %%
 * Dual licensed under GNU LGPL 2.1 or Apache License 2.0
 * #L%
 */
/* CCJSqlParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CCJSqlParserTokenManager.java */
package net.sf.jsqlparser.parser;
import java.lang.reflect.Field;
import java.lang.Integer;
import net.sf.jsqlparser.parser.feature.*;
import net.sf.jsqlparser.expression.*;
import net.sf.jsqlparser.expression.operators.arithmetic.*;
import net.sf.jsqlparser.expression.operators.conditional.*;
import net.sf.jsqlparser.expression.operators.relational.*;
import net.sf.jsqlparser.schema.*;
import net.sf.jsqlparser.statement.*;
import net.sf.jsqlparser.statement.analyze.*;
import net.sf.jsqlparser.statement.alter.*;
import net.sf.jsqlparser.statement.alter.sequence.*;
import net.sf.jsqlparser.statement.comment.*;
import net.sf.jsqlparser.statement.create.function.*;
import net.sf.jsqlparser.statement.create.index.*;
import net.sf.jsqlparser.statement.create.procedure.*;
import net.sf.jsqlparser.statement.create.schema.*;
import net.sf.jsqlparser.statement.create.synonym.*;
import net.sf.jsqlparser.statement.create.sequence.*;
import net.sf.jsqlparser.statement.create.table.*;
import net.sf.jsqlparser.statement.create.view.*;
import net.sf.jsqlparser.statement.create.deputyclass.*;
import net.sf.jsqlparser.statement.delete.*;
import net.sf.jsqlparser.statement.drop.*;
import net.sf.jsqlparser.statement.insert.*;
import net.sf.jsqlparser.statement.replace.*;
import net.sf.jsqlparser.statement.execute.*;
import net.sf.jsqlparser.statement.select.*;
import net.sf.jsqlparser.statement.show.*;
import net.sf.jsqlparser.statement.truncate.*;
import net.sf.jsqlparser.statement.update.*;
import net.sf.jsqlparser.statement.upsert.*;
import net.sf.jsqlparser.statement.merge.*;
import net.sf.jsqlparser.statement.values.*;
import net.sf.jsqlparser.statement.grant.*;
import java.util.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class CCJSqlParserTokenManager implements CCJSqlParserConstants {
    public FeatureConfiguration configuration = new FeatureConfiguration();

    public void CommonTokenAction(Token t)
        {
                t.absoluteBegin = getCurrentTokenAbsolutePosition();
                t.absoluteEnd = t.absoluteBegin + t.image.length();
        }

        public int getCurrentTokenAbsolutePosition()
        {
                if (input_stream instanceof SimpleCharStream)
                        return ((SimpleCharStream)input_stream).getAbsoluteTokenBegin();
                return -1;
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6){
   switch (pos)
   {
      case 0:
         if ((active5 & 0x4000000000000L) != 0L)
            return 335;
         if ((active1 & 0x1f800000000000L) != 0L)
         {
            jjmatchedKind = 326;
            return 26;
         }
         if ((active2 & 0x7e00L) != 0L)
         {
            jjmatchedKind = 326;
            return 16;
         }
         if ((active2 & 0xfffd8000000000L) != 0L)
         {
            jjmatchedKind = 326;
            return 110;
         }
         if ((active5 & 0x20000000000000L) != 0L)
            return 344;
         if ((active5 & 0x6000060000000000L) != 0L)
            return 67;
         if ((active4 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 326;
            return 3;
         }
         if ((active4 & 0x1f000000000000L) != 0L)
         {
            jjmatchedKind = 326;
            return 60;
         }
         if ((active5 & 0x8000L) != 0L)
            return 56;
         if ((active0 & 0xdf800000L) != 0L || (active1 & 0xfff80000L) != 0L)
         {
            jjmatchedKind = 326;
            return 345;
         }
         if ((active5 & 0x400000000000L) != 0L)
            return 346;
         if ((active0 & 0x4000000000L) != 0L || (active2 & 0x4L) != 0L || (active3 & 0xfff3e60000000000L) != 0L || (active4 & 0x5c000001L) != 0L)
         {
            jjmatchedKind = 326;
            return 179;
         }
         if ((active3 & 0x7ffc0L) != 0L)
         {
            jjmatchedKind = 326;
            return 34;
         }
         if ((active4 & 0x123ff0000L) != 0L || (active5 & 0x3000000L) != 0L)
         {
            jjmatchedKind = 326;
            return 220;
         }
         if ((active0 & 0x1ffdff9f20000000L) != 0L || (active5 & 0x60000L) != 0L)
         {
            jjmatchedKind = 326;
            return 226;
         }
         if ((active0 & 0x2000000000L) != 0L || (active4 & 0xff7cL) != 0L || (active5 & 0xc00000L) != 0L)
         {
            jjmatchedKind = 326;
            return 271;
         }
         if ((active5 & 0x1810000000L) != 0L)
            return 347;
         if ((active1 & 0x1e0000000000000L) != 0L)
         {
            jjmatchedKind = 326;
            return 6;
         }
         if ((active5 & 0x2000040000000L) != 0L)
            return 348;
         if ((active0 & 0x7fbffcL) != 0L || (active1 & 0xfe007ffd00000000L) != 0L || (active2 & 0x3fff81fbL) != 0L || (active3 & 0x380000L) != 0L || (active4 & 0x40fffe00000000L) != 0L || (active5 & 0x8000000000080000L) != 0L || (active6 & 0x11fL) != 0L)
         {
            jjmatchedKind = 326;
            return 71;
         }
         if ((active5 & 0x1184080000000L) != 0L)
            return 349;
         if ((active0 & 0x6000000000000000L) != 0L || (active1 & 0x7fffeL) != 0L || (active6 & 0x40L) != 0L)
         {
            jjmatchedKind = 326;
            return 136;
         }
         if ((active2 & 0x7fc0000000L) != 0L)
         {
            jjmatchedKind = 326;
            return 127;
         }
         if ((active3 & 0xc01ffffc00000L) != 0L || (active5 & 0x300000L) != 0L || (active6 & 0x80L) != 0L)
         {
            jjmatchedKind = 326;
            return 343;
         }
         if ((active2 & 0x7f00000000000000L) != 0L || (active3 & 0x3fL) != 0L)
         {
            jjmatchedKind = 326;
            return 41;
         }
         return -1;
      case 1:
         if ((active4 & 0x1009f0000L) != 0L || (active5 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 219;
         }
         if ((active0 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 225;
         }
         if ((active5 & 0x6000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 312;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active5 & 0x2340000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 97;
               jjmatchedPos = 1;
            }
            return 71;
         }
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 244;
         }
         if ((active2 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 15;
         }
         if ((active2 & 0x6000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 126;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 135;
         }
         if ((active0 & 0x2000000000L) != 0L || (active4 & 0x3800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 295;
         }
         if ((active2 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 109;
         }
         if ((active3 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 200;
         }
         if ((active0 & 0x57fddfdf6fc7bffcL) != 0L || (active1 & 0x1cf0fffdffff3ffeL) != 0L || (active2 & 0x20600087fffbfc04L) != 0L || (active3 & 0xdfec07ffffffffe6L) != 0L || (active4 & 0x7ffffe7f60c071L) != 0L || (active5 & 0x20000L) != 0L || (active6 & 0x1d0L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 71;
         }
         if ((active0 & 0x90380000L) != 0L || (active1 & 0xe20000000000c000L) != 0L || (active2 & 0x5f9ffc00000401fbL) != 0L || (active3 & 0x1L) != 0L || (active4 & 0x600L) != 0L || (active5 & 0x80000L) != 0L || (active6 & 0xeL) != 0L)
            return 71;
         if ((active4 & 0x100L) != 0L || (active5 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 270;
         }
         if ((active3 & 0x18L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 40;
         }
         if ((active1 & 0xf000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 25;
         }
         if ((active3 & 0x13e00000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 178;
         }
         if ((active1 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 5;
         }
         if ((active2 & 0x1800000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 131;
         }
         if ((active4 & 0xcL) != 0L || (active5 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 1;
            }
            return 292;
         }
         return -1;
      case 2:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 2;
            }
            return 350;
         }
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 2;
            }
            return 243;
         }
         if ((active3 & 0x18L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 2;
            }
            return 39;
         }
         if ((active0 & 0x57fdffffebc71bdcL) != 0L || (active1 & 0xd9f1f87dffbf87feL) != 0L || (active2 & 0x30f3f8e7eff8fd7fL) != 0L || (active3 & 0xffede67fffffffe7L) != 0L || (active4 & 0x60ffff7cf9f871L) != 0L || (active5 & 0x10a0000L) != 0L || (active6 & 0x1d0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 2;
            }
            return 71;
         }
         if ((active2 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 2;
            }
            return 14;
         }
         if ((active2 & 0x1800000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 2;
            }
            return 130;
         }
         if ((active2 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 2;
            }
            return 108;
         }
         if ((active4 & 0x60000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 2;
            }
            return 218;
         }
         if ((active0 & 0x420a420L) != 0L || (active1 & 0x400078000403800L) != 0L || (active2 & 0x60c000010030000L) != 0L || (active3 & 0x12018000000000L) != 0L || (active4 & 0x1f000003000400L) != 0L)
            return 71;
         if ((active5 & 0x4000000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 312;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active4 & 0x100L) != 0L || (active5 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 2;
            }
            return 277;
         }
         if ((active1 & 0xe000000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 2;
            }
            return 24;
         }
         if ((active4 & 0xcL) != 0L || (active5 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 2;
            }
            return 291;
         }
         return -1;
      case 3:
         if ((active3 & 0x18L) != 0L)
            return 38;
         if ((active2 & 0x10000000000L) != 0L)
            return 107;
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return 242;
         }
         if ((active4 & 0x20000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return 217;
         }
         if ((active4 & 0xcL) != 0L || (active5 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return 290;
         }
         if ((active1 & 0xe000000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return 23;
         }
         if ((active0 & 0x109d88000000L) != 0L || (active1 & 0x38000c1b00c0L) != 0L || (active2 & 0x3060000008cafc40L) != 0L || (active3 & 0xe30210000800100L) != 0L || (active4 & 0x60f9c00200a070L) != 0L || (active6 & 0x10L) != 0L)
            return 71;
         if ((active4 & 0x100L) != 0L || (active5 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return 276;
         }
         if ((active0 & 0x77fdef6263c71bdcL) != 0L || (active1 & 0xd9f1c77df3a4873eL) != 0L || (active2 & 0x49bf8f7e730013fL) != 0L || (active3 & 0xf1cdc67fff7ffee7L) != 0L || (active4 & 0x1c063f7cfd5801L) != 0L || (active5 & 0x10a0000L) != 0L || (active6 & 0x1c0L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return 71;
         }
         if ((active2 & 0x800000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return 129;
         }
         if ((active2 & 0x200L) != 0L)
            return 13;
         return -1;
      case 4:
         if ((active1 & 0xe000000000000L) != 0L)
            return 22;
         if ((active3 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 4;
            }
            return 37;
         }
         if ((active6 & 0x100L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active4 & 0xcL) != 0L || (active5 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 257;
               jjmatchedPos = 4;
            }
            return 71;
         }
         if ((active5 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 4;
            }
            return 275;
         }
         if ((active4 & 0x20000L) != 0L)
            return 216;
         if ((active0 & 0x62fdc3ea434213dcL) != 0L || (active1 & 0xc9e0e644fba487beL) != 0L || (active2 & 0x49bf8f32430793cL) != 0L || (active3 & 0xe1c9c65fef237ae4L) != 0L || (active4 & 0x1c64335cfd5941L) != 0L || (active5 & 0x10a0000L) != 0L || (active6 & 0xc0L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 4;
            }
            return 71;
         }
         if ((active0 & 0x15002c0020850800L) != 0L || (active1 & 0x1011013900000000L) != 0L || (active2 & 0x40000cc3000003L) != 0L || (active3 & 0x10040020105c8403L) != 0L || (active4 & 0x20c20000000L) != 0L)
            return 71;
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 4;
            }
            return 241;
         }
         return -1;
      case 5:
         if ((active0 & 0x20583000200009cL) != 0L || (active1 & 0x820840411a08020L) != 0L || (active2 & 0x480602004000108L) != 0L || (active3 & 0x4000040248020004L) != 0L || (active4 & 0x824084064000dL) != 0L)
            return 71;
         if ((active6 & 0x100L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x60f848ea41421340L) != 0L || (active1 & 0xc1cc6240ea04079eL) != 0L || (active2 & 0x1b98d3a0307834L) != 0L || (active3 & 0xa1c9c25da7217ae0L) != 0L || (active4 & 0x1440331c995940L) != 0L || (active5 & 0x10a0000L) != 0L || (active6 & 0xc0L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 5;
            }
            return 71;
         }
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 5;
            }
            return 227;
         }
         if ((active3 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 5;
            }
            return 36;
         }
         if ((active5 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 5;
            }
            return 274;
         }
         return -1;
      case 6:
         if ((active0 & 0x4069420241021140L) != 0L || (active1 & 0x41800200aa000114L) != 0L || (active2 & 0xa188080300000L) != 0L || (active3 & 0xa109000080204a00L) != 0L || (active4 & 0x10403000100100L) != 0L)
            return 71;
         if ((active6 & 0x100L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x800000000000000L) != 0L)
            return 228;
         if ((active0 & 0x209008e800400200L) != 0L || (active1 & 0x804c60404004068aL) != 0L || (active2 & 0x11805320007834L) != 0L || (active3 & 0xc0c25d270130f0L) != 0L || (active4 & 0x400031c895848L) != 0L || (active5 & 0x10a0000L) != 0L || (active6 & 0xc0L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 6;
            }
            return 71;
         }
         if ((active5 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 6;
            }
            return 273;
         }
         return -1;
      case 7:
         if ((active0 & 0x2010002800000000L) != 0L || (active1 & 0x4600040000480L) != 0L || (active2 & 0x5200000020L) != 0L || (active3 & 0xc0404c20000070L) != 0L || (active4 & 0x300885800L) != 0L || (active6 & 0x80L) != 0L)
            return 71;
         if ((active6 & 0x100L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active5 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 7;
            }
            return 272;
         }
         if ((active0 & 0xc008c000400200L) != 0L || (active1 & 0x804800400004020aL) != 0L || (active2 & 0x11800120007814L) != 0L || (active3 & 0x821107013080L) != 0L || (active4 & 0x400001c010048L) != 0L || (active5 & 0x10a0000L) != 0L || (active6 & 0x40L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 7;
            }
            return 71;
         }
         return -1;
      case 8:
         if ((active0 & 0xc000000200L) != 0L || (active1 & 0x8000004000040000L) != 0L || (active2 & 0x10L) != 0L || (active3 & 0x821102013080L) != 0L || (active4 & 0x10010040L) != 0L)
            return 71;
         if ((active6 & 0x100L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xc0080000400000L) != 0L || (active1 & 0x4800000000020aL) != 0L || (active2 & 0x11800120007804L) != 0L || (active3 & 0x805000000L) != 0L || (active4 & 0x400000c000008L) != 0L || (active5 & 0x10a0000L) != 0L || (active6 & 0xc0L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 8;
            return 71;
         }
         if ((active5 & 0x800000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 8;
            return 281;
         }
         return -1;
      case 9:
         if ((active0 & 0x80080000000000L) != 0L || (active1 & 0x208L) != 0L || (active2 & 0x11800000006000L) != 0L || (active3 & 0x805000000L) != 0L || (active4 & 0x8L) != 0L || (active5 & 0x20000L) != 0L || (active6 & 0x80L) != 0L)
            return 71;
         if ((active6 & 0x100L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active5 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 9;
            }
            return 280;
         }
         if ((active0 & 0x40000000400000L) != 0L || (active1 & 0x48000000000002L) != 0L || (active2 & 0x120001804L) != 0L || (active4 & 0x400000c000000L) != 0L || (active5 & 0x80000L) != 0L || (active6 & 0x40L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 9;
            }
            return 71;
         }
         return -1;
      case 10:
         if ((active2 & 0x1800L) != 0L)
            return 71;
         if ((active6 & 0x100L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active5 & 0x800000L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 63;
               jjmatchedPos = 10;
            }
            return 351;
         }
         if ((active0 & 0x40000000400000L) != 0L || (active1 & 0x48000000000002L) != 0L || (active2 & 0x120004004L) != 0L || (active4 & 0x400000c000000L) != 0L || (active5 & 0x20000L) != 0L || (active6 & 0x40L) != 0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 10;
            }
            return 71;
         }
         return -1;
      case 11:
         if ((active1 & 0x8000000000000L) != 0L || (active2 & 0x120000000L) != 0L || (active4 & 0x4000008000000L) != 0L)
            return 71;
         if ((active6 & 0x100L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active6 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x40000000400000L) != 0L || (active1 & 0x40000000000002L) != 0L || (active2 & 0x5004L) != 0L || (active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 11;
            return 71;
         }
         return -1;
      case 12:
         if ((active0 & 0x400000L) != 0L || (active1 & 0x40000000000000L) != 0L || (active2 & 0x4004L) != 0L)
            return 71;
         if ((active6 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x2L) != 0L || (active2 & 0x1000L) != 0L || (active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 12;
            return 71;
         }
         return -1;
      case 13:
         if ((active1 & 0x2L) != 0L || (active2 & 0x1000L) != 0L)
            return 71;
         if ((active6 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x40000000000000L) != 0L || (active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 13;
            return 71;
         }
         return -1;
      case 14:
         if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 14;
            return 71;
         }
         if ((active0 & 0x40000000000000L) != 0L)
            return 71;
         if ((active6 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active6 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 15;
            return 71;
         }
         return -1;
      case 16:
         if ((active6 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 16;
            return 71;
         }
         return -1;
      case 17:
         if ((active4 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 326;
            jjmatchedPos = 17;
            return 71;
         }
         if ((active6 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active4 & 0x4000000L) != 0L)
            return 71;
         if ((active6 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active6 & 0x40L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 326;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3, long active4, long active5, long active6){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3, active4, active5, active6), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 348;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1800000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x8000000000000000L, 0x1L);
      case 37:
         return jjStopAtPos(0, 371);
      case 38:
         jjmatchedKind = 367;
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 332);
      case 41:
         return jjStopAtPos(0, 333);
      case 42:
         return jjStopAtPos(0, 346);
      case 43:
         return jjStopAtPos(0, 349);
      case 44:
         return jjStopAtPos(0, 49);
      case 45:
         jjmatchedKind = 361;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x6000040000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 335, 56);
      case 47:
         return jjStartNfaWithStates_0(0, 370, 335);
      case 58:
         jjmatchedKind = 336;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x800200000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 311);
      case 60:
         jjmatchedKind = 351;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x1184000000000L, 0x0L);
      case 61:
         jjmatchedKind = 334;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 350;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2000000000000L, 0x0L);
      case 63:
         jjmatchedKind = 347;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x18000000000L, 0x0L);
      case 64:
         jjmatchedKind = 380;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x2100000000L, 0x0L);
      case 91:
         return jjStartNfaWithStates_0(0, 373, 344);
      case 93:
         return jjStopAtPos(0, 374);
      case 94:
         return jjStopAtPos(0, 372);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x7fbffcL, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0xdf800000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1ffdff9f20000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x60000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x7fffeL, 0x0L, 0x0L, 0x0L, 0x0L, 0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfff80000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7ffd00000000L, 0x40000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f800000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e0000000000000L, 0x0L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfe00000000000000L, 0x1fbL, 0x0L, 0x0L, 0x80000L, 0xeL);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7e00L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x38000L, 0x0L, 0x0L, 0x0L, 0x100L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3ff80000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fc0000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfffd8000000000L, 0x0L, 0x0L, 0x0L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7f00000000000000L, 0x3fL, 0x0L, 0x0L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7ffc0L, 0x0L, 0x0L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x380000L, 0x0L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xc01ffffc00000L, 0x0L, 0x300000L, 0x80L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L, 0x4L, 0xfff3e60000000000L, 0x5c000001L, 0x0L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L, 0x0L, 0x0L, 0xff7cL, 0xc00000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x123ff0000L, 0x3000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x7e00000000L, 0x0L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0xff8000000000L, 0x0L, 0x10L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x1f000000000000L, 0x0L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x20000000000000L, 0x0L, 0x0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x40000000000000L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 389;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x680000000000000L, 0x0L);
      case 124:
         return jjStartNfaWithStates_0(0, 366, 346);
      case 125:
         return jjStopAtPos(0, 376);
      case 126:
         jjmatchedKind = 353;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x0L, 0x0L, 0x400000000L, 0x0L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3, long active4, long active5, long active6){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3, active4, active5, active6);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active5 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 362);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x100000000000L, active6, 0L);
      case 38:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         else if ((active5 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 360);
         break;
      case 42:
         if ((active5 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 354);
         break;
      case 45:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x80000000000L, active6, 0L);
      case 58:
         if ((active5 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 379);
         break;
      case 60:
         if ((active5 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 368);
         break;
      case 61:
         if ((active5 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 365);
         break;
      case 62:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 191);
         else if ((active5 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 357);
         else if ((active5 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 369);
         else if ((active5 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 383;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x4000000000000000L, active6, 0x1L);
      case 64:
         if ((active5 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 352);
         else if ((active5 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 358);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000005f20000000L, active1, 0x20001000000000L, active2, 0x83c0180000L, active3, 0x200004001c0L, active4, 0x20009e0000000cL, active5, 0x400000L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x18L, active1, 0L, active2, 0L, active3, 0x40000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active5 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 375);
         return jjMoveStringLiteralDfa2_0(active0, 0xe0L, active1, 0x1000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000001800000L, active1, 0x1000000fcL, active2, 0x10400638000L, active3, 0x1fe01fef800200L, active4, 0x2000000060L, active5, 0L, active6, 0x80L);
      case 70:
      case 102:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 121, 71);
         else if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x600000000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0x800000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1f8000000000L, active1, 0L, active2, 0L, active3, 0x60000000000000L, active4, 0x30000000010L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000L, active1, 0x4c0000c00000f00L, active2, 0x1809800000L, active3, 0x380002000000400L, active4, 0x7c4040000100L, active5, 0x800000L, active6, 0x150L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000e00L, active1, 0x1000802000080000L, active2, 0L, active3, 0x10000800L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x102000L, active2, 0L, active3, 0L, active4, 0x1d000000000000L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 146, 71);
         else if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xb000L, active1, 0xc000000000600000L, active2, 0x100000000000007bL, active3, 0L, active4, 0x1009f0000L, active5, 0x1080000L, active6, 0xeL);
      case 79:
      case 111:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x200L) != 0L)
         {
            jjmatchedKind = 265;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1fdc00008000000L, active1, 0x10007c000008000L, active2, 0x9ff86036000200L, active3, 0x80001c000000000L, active4, 0x42800000000400L, active5, 0x20000L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L, active2, 0x2000000000000000L, active3, 0x20L, active4, 0x600000L, active5, 0L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x1c000000L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 97, 71);
         else if ((active5 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 97, 71);
         return jjMoveStringLiteralDfa2_0(active0, 0x600002000060000L, active1, 0xf080000010000L, active2, 0L, active3, 0x1f001L, active4, 0x3800L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 135;
            jjmatchedPos = 1;
         }
         else if ((active5 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 97, 71);
         else if ((active5 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 97, 71);
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0x800000L, active2, 0x7d00L, active3, 0L, active4, 0x23000000L, active5, 0L, active6, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 71);
         else if ((active5 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 377;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0x1000000000000000L, active4, 0L, active5, 0x400000000000000L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000040400000L, active1, 0x10700000060000L, active2, 0x60000000000000L, active3, 0x20000000003e0006L, active4, 0x4000L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x18L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xff000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000080000000L, active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0x8001L, active5, 0L, active6, 0L);
      case 124:
         if ((active5 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 359);
         break;
      case 126:
         if ((active5 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 355;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3, active4, active5, active6);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0xeL);
      case 42:
         if ((active5 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 356);
         break;
      case 62:
         if ((active5 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 363);
         else if ((active5 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 364);
         else if ((active5 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 382);
         else if ((active6 & 0x1L) != 0L)
            return jjStopAtPos(2, 384);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x138000001100L, active1, 0x11000000200002L, active2, 0x200000L, active3, 0x1000000000800800L, active4, 0x800L, active5, 0L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000020000L, active4, 0x1000cL, active5, 0x400000L, active6, 0L);
      case 67:
      case 99:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0x5000000020020000L, active1, 0xc000000003800000L, active2, 0x180006000000L, active3, 0x3000000L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(2, 5, 71);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 71);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2000000001L, active3, 0x1L, active4, 0x200000L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active4 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 280;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000c0000000000L, active1, 0xc000000L, active2, 0x2000000000008000L, active3, 0x83018L, active4, 0x34002000010L, active5, 0L, active6, 0L);
      case 70:
      case 102:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 122, 71);
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4040000000L, active1, 0xcL, active2, 0x400000000400000L, active3, 0x4000000L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 156, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0x800200L, active1, 0x40000000000000L, active2, 0L, active3, 0x2028000000L, active4, 0x40000000L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000010100000L, active2, 0x200L, active3, 0x440000001030c000L, active4, 0x8020060000L, active5, 0L, active6, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x200000800000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 71);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 71);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 71);
         else if ((active4 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 304;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1c00100000000L, active1, 0x305400000030L, active2, 0x1060400000000000L, active3, 0x4000000000L, active4, 0x1c000e1c080000L, active5, 0L, active6, 0x100L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000000000L, active1, 0x20000L, active2, 0x1800001000000L, active3, 0x900200000000000L, active4, 0x20000000004160L, active5, 0x800000L, active6, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xf0000002000000L, active1, 0x800400000000000L, active2, 0x1808000102L, active3, 0x8000000040400000L, active4, 0x40040000000000L, active5, 0x20000L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x400200000000000L, active1, 0xe880000010000L, active2, 0x2000000007c00L, active3, 0x20000000010000L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         if ((active4 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 266, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L, active1, 0x100000020040000L, active2, 0L, active3, 0x800080000000L, active4, 0x108000L, active5, 0L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000000000L, active4, 0x800000L, active5, 0x1000000L, active6, 0L);
      case 82:
      case 114:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 305, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000040000L, active1, 0x70800000000L, active2, 0x400000004L, active3, 0x402c0L, active4, 0x803000000000L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active5 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 378);
         return jjMoveStringLiteralDfa3_0(active0, 0x100001e00000004L, active1, 0x800000000807c0L, active2, 0x80008L, active3, 0x200d000f00000000L, active4, 0x100400001L, active5, 0L, active6, 0xc0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 71);
         else if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000089400818L, active1, 0x1c0000000L, active2, 0x80081c0100070L, active3, 0x10001000000126L, active4, 0x780000000000L, active5, 0L, active6, 0x10L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000008000L, active2, 0L, active3, 0x40000000000000L, active4, 0x3000L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 71);
         return jjMoveStringLiteralDfa3_0(active0, 0xc0L, active1, 0x20000000000000L, active2, 0x10004000000000L, active3, 0x20000000400L, active4, 0L, active5, 0x80000L, active6, 0L);
      case 87:
      case 119:
         if ((active3 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000020000000L, active3, 0x10000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10200000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 71);
         else if ((active2 & 0x10000L) != 0L)
         {
            jjmatchedKind = 144;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L, active2, 0x20000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x200000000000000L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3, active4, active5, active6);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x2L, active2, 0x20000000L, active3, 0L, active4, 0x1c000000L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2200000002040040L, active1, 0x800114L, active2, 0x90880002000004L, active3, 0x800040000040L, active4, 0x8000000200000L, active5, 0x80000L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000208000L, active2, 0L, active3, 0L, active4, 0x2000004000L, active5, 0L, active6, 0x8L);
      case 67:
      case 99:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xc0200000000L, active1, 0x410108000280L, active2, 0xc0000000L, active3, 0x113a00L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active3 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 215, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0L, active4, 0x40000000000L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 71);
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 71);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 151, 71);
         else if ((active3 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 249, 71);
         else if ((active3 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 251, 71);
         else if ((active4 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 269, 71);
         else if ((active4 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 271, 71);
         else if ((active4 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 310, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0x4800000804L, active1, 0x20041000028L, active2, 0x20410010003bL, active3, 0x406000c200003L, active4, 0x400100L, active5, 0x800000L, active6, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000040000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400000000L, active3, 0x440000L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 71);
         else if ((active3 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 200, 71);
         else if ((active4 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 299;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20420000L, active1, 0x40000000000000L, active2, 0x8000000000000L, active3, 0x2000000000L, active4, 0x700000000000L, active5, 0L, active6, 0x10L);
      case 73:
      case 105:
         if ((active3 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 237, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0x800198L, active1, 0x20000000000000L, active2, 0x1002001000000L, active3, 0x100000020000020L, active4, 0x300900800L, active5, 0L, active6, 0L);
      case 75:
      case 107:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 155, 71);
         else if ((active4 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 303, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x4000000L, active3, 0x10000000L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 71);
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 309, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0x5000400000011000L, active1, 0x4000204022040000L, active2, 0x40000000000000L, active3, 0x80004080020000L, active4, 0xcL, active5, 0x400000L, active6, 0x100L);
      case 77:
      case 109:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000000000L, active1, 0x40000000000L, active2, 0L, active3, 0x4000L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 137, 13);
         else if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 138;
            jjmatchedPos = 3;
         }
         else if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 189, 71);
         else if ((active4 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 260, 71);
         else if ((active4 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 296, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0x60030000000000L, active1, 0x1000000000000L, active2, 0x7800L, active3, 0L, active4, 0x60001000L, active5, 0L, active6, 0x6L);
      case 79:
      case 111:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 134, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0x800000000000000L, active2, 0x400000000000L, active3, 0x8000000000008400L, active4, 0xb0000L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 71);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 81, 71);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 143, 71);
         else if ((active3 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 250, 71);
         else if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0x2000000000000004L, active4, 0x40L, active5, 0L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x40000L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 3;
         }
         else if ((active4 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 281, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0x800008000000000L, active1, 0x8010000080000000L, active2, 0x2000000000000L, active3, 0x1000000000080010L, active4, 0x20000000000L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 145, 71);
         else if ((active3 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 232, 71);
         else if ((active3 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 244, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0x480200000000000L, active1, 0x3810000000L, active2, 0x400000000000000L, active3, 0x1000000000000L, active4, 0x4000000000000L, active5, 0x20000L, active6, 0L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 71);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 71);
         else if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 147, 71);
         else if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 150, 71);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 168, 107);
         else if ((active4 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 295, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x80000400000400L, active2, 0L, active3, 0x4048000c00000080L, active4, 0x10000000000001L, active5, 0L, active6, 0xc0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000L, active1, 0xe000000000000L, active2, 0x8800000100L, active3, 0x401302000000L, active4, 0xc00000000L, active5, 0x1000000L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x1200000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         if ((active3 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 245, 71);
         else if ((active4 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 294, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 188, 71);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0x1000000L, active4, 0x1000000000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3, active4, active5, active6);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000000000L, active5, 0L, active6, 0x110L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0x40000000000000L, active2, 0x7800L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000408200000000L, active1, 0x8400a0000000L, active2, 0x1200000000L, active3, 0x8000080004000L, active4, 0L, active5, 0L, active6, 0x6L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x100L, active2, 0L, active3, 0x4000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L, active2, 0x580000000000L, active3, 0x4000000001000000L, active4, 0x14001000L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 116, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0x40000000000000L, active4, 0x200000000L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 71);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 71);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 71);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 71);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 71);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 124, 71);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 162, 71);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 210, 71);
         else if ((active3 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 214, 71);
         else if ((active3 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 220, 71);
         else if ((active4 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 290;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 297, 71);
         else if ((active5 & 0x400000L) != 0L)
         {
            jjmatchedKind = 257;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x868000041000000L, active1, 0x8000000400000000L, active2, 0x400200004000000L, active3, 0x2000400000011200L, active4, 0x1400084080000dL, active5, 0L, active6, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 71:
      case 103:
         if ((active4 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 285, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0x30000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000100080000L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 71);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 71);
         else if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 158;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000020000L, active1, 0x100020000040400L, active2, 0x88000000200004L, active3, 0x81000000022880L, active4, 0x201000000000L, active5, 0x1000000L, active6, 0L);
      case 75:
      case 107:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 212, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 153, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x208000L, active2, 0x10000000000100L, active3, 0x100000000000050L, active4, 0x4800L, active5, 0x80000L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000000000L, active1, 0L, active2, 0x4000000000L, active3, 0x40340000020L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 71);
         else if ((active4 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 273, 216);
         return jjMoveStringLiteralDfa5_0(active0, 0x144L, active1, 0x20000040000000L, active2, 0x1000000000000L, active3, 0x8000000000000000L, active4, 0x8000000L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400008L, active1, 0x80004000000200L, active2, 0L, active3, 0L, active4, 0x442000000140L, active5, 0L, active6, 0x8L);
      case 80:
      case 112:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc000001800000L, active2, 0x20000000L, active3, 0x20000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 71);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 129, 71);
         else if ((active3 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 192, 71);
         else if ((active3 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 193, 71);
         else if ((active3 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 207, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000200L, active1, 0x80000000000008aL, active2, 0x8100100038L, active3, 0x801c06000000L, active4, 0x400000L, active5, 0L, active6, 0xc0L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 56, 71);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 71);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 163, 71);
         else if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 182, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0L, active2, 0L, active3, 0x20200000L, active4, 0L, active5, 0x800000L, active6, 0L);
      case 84:
      case 116:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 71);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 71);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 152, 71);
         else if ((active3 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 202, 71);
         else if ((active3 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 229, 71);
         else if ((active3 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 242, 71);
         else if ((active3 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 252, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0x280000000000000L, active1, 0x600010000020L, active2, 0L, active3, 0L, active4, 0x200000L, active5, 0x20000L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000a000004L, active2, 0L, active3, 0x4L, active4, 0x50000L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10L, active1, 0L, active2, 0L, active3, 0L, active4, 0x100000L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 128, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800000000000L, active3, 0x8000000L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 71);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 71);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 211, 71);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0x10L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3, active4, active5, active6);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         if ((active3 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 234, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000002000000000L, active1, 0L, active2, 0x8000106000L, active3, 0x100804100000010L, active4, 0x214001000L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 209, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0x6000c000000040L, active1, 0x80040000L, active2, 0L, active3, 0x80200000L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 154, 71);
         else if ((active4 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 286, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x4000000042000000L, active2, 0L, active3, 0x11000L, active4, 0L, active5, 0L, active6, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 4, 71);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 71);
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 71);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 71);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 71);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 71);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 71);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 71);
         else if ((active3 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 222, 71);
         else if ((active3 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 225, 71);
         else if ((active4 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 274, 71);
         else if ((active4 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 277, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0x20001000000L, active1, 0x200000000012L, active2, 0x2004080000000L, active3, 0x4000000L, active4, 0L, active5, 0x1000000L, active6, 0L);
      case 71:
      case 103:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 71);
         else if ((active4 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 307, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L, active2, 0x4L, active3, 0L, active4, 0x80000L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         if ((active3 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 254, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L, active2, 0x80000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000200L, active1, 0x4400020000080L, active2, 0x10000100000000L, active3, 0xc00000020L, active4, 0x4800L, active5, 0x80000L, active6, 0xc0L);
      case 75:
      case 107:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 174, 71);
         break;
      case 76:
      case 108:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 71);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 136, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x104L, active2, 0x101200000000L, active3, 0x1000040L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         if ((active4 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 256, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 71);
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 301, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0x809000000000000L, active1, 0x100000000000600L, active2, 0x8000000200000L, active3, 0x2080401000000a00L, active4, 0x1100010000L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1800L, active3, 0x41020000000000L, active4, 0x8100000L, active5, 0L, active6, 0x8L);
      case 80:
      case 112:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 173, 71);
         else if ((active3 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 219, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x10L);
      case 82:
      case 114:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0x4080000040400000L, active1, 0x80000000000008L, active2, 0x20000000L, active3, 0x8000000004000L, active4, 0x4000000000040L, active5, 0x20000L, active6, 0L);
      case 83:
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 71);
         else if ((active4 & 0x4L) != 0L)
         {
            jjmatchedKind = 258;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 291, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0L, active2, 0x10L, active3, 0x2002000L, active4, 0x2000800008L, active5, 0L, active6, 0x100L);
      case 84:
      case 116:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 71);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 71);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 71);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 71);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 131, 71);
         else if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 183, 71);
         else if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 186, 71);
         else if ((active3 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 194, 71);
         else if ((active4 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 278, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x8000000L, active2, 0L, active3, 0x20000080L, active4, 0x100000000000L, active5, 0x800000L, active6, 0x6L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x400000000100L, active5, 0L, active6, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L, active2, 0x1800000000020L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 87:
      case 119:
         if ((active4 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 298, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000000000L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 71);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 165, 71);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3, active4, active5, active6);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x8000000L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x80004000000000L, active1, 0x40008L, active2, 0x1800100000020L, active3, 0L, active4, 0x40L, active5, 0x820000L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L, active2, 0x1800L, active3, 0x100000000L, active4, 0L, active5, 0L, active6, 0x40L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x8000000000402L, active2, 0L, active3, 0x404c00000000L, active4, 0x10800000L, active5, 0L, active6, 0x80L);
      case 68:
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 71);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 159, 71);
         else if ((active3 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 253, 71);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0L, active4, 0x10000L, active5, 0x80000L, active6, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 71);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 71);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 71);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 71);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 71);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 71);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 71);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 71);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 126, 71);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 171, 71);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 172, 71);
         else if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 213, 71);
         else if ((active3 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 223, 71);
         else if ((active4 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 293, 71);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0x8000000040000000L, active2, 0x10L, active3, 0x21000040L, active4, 0x100080000L, active5, 0L, active6, 0x100L);
      case 71:
      case 103:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 120, 71);
         else if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 149, 71);
         else if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 179, 71);
         else if ((active3 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 203, 71);
         else if ((active4 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 292, 71);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x4000000000L, active2, 0x20000000L, active3, 0x21002003080L, active4, 0x4100000000000L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 148, 71);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 167, 71);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000L, active5, 0L, active6, 0x8L);
      case 77:
      case 109:
         if ((active3 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 255, 71);
         break;
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 71);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 93, 71);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 105, 71);
         else if ((active3 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 240, 71);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000200L, active2, 0x4000000000L, active3, 0x4000000L, active4, 0x4800L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0x400000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10L, active4, 0x8L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 177, 71);
         else if ((active3 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 248, 71);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0x6000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 71);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 71);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 71);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000002000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x1000000L, active6, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 71);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 71);
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 228);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 71);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 71);
         else if ((active3 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 201, 71);
         else if ((active3 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 243, 71);
         else if ((active4 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 264, 71);
         else if ((active4 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 276, 71);
         else if ((active4 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 302, 71);
         else if ((active4 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 308, 71);
         return jjMoveStringLiteralDfa7_0(active0, 0x40008000000200L, active1, 0L, active2, 0L, active3, 0x800000000000L, active4, 0x200001000L, active5, 0L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x1200000000L, active3, 0x10000L, active4, 0L, active5, 0L, active6, 0x16L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000000000000L, active4, 0L, active5, 0L, active6, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 119, 71);
         else if ((active3 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 206, 71);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3, active4, active5, active6);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0L, active4, 0x4000000000008L, active5, 0x80000L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0x1000000L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10L, active3, 0x4000000L, active4, 0xc000000L, active5, 0x1000000L, active6, 0L);
      case 68:
      case 100:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 71);
         else if ((active4 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 275, 71);
         else if ((active4 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 288, 71);
         break;
      case 69:
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 71);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 71);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 161, 71);
         else if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 164, 71);
         else if ((active3 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 197, 71);
         else if ((active3 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 238, 71);
         else if ((active4 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 268, 71);
         else if ((active4 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 279, 71);
         else if ((active4 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 289, 71);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0x200L, active2, 0L, active3, 0L, active4, 0x100000010000L, active5, 0L, active6, 0x18L);
      case 71:
      case 103:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 114, 71);
         else if ((active4 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 267, 71);
         else if ((active4 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 270, 71);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L, active1, 0L, active2, 0L, active3, 0L, active4, 0x10000000L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x80080000000000L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000L, active6, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1800L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 75:
      case 107:
         if ((active3 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 230, 71);
         break;
      case 76:
      case 108:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 133, 71);
         else if ((active3 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 198, 71);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1800100000000L, active3, 0x100000000L, active4, 0L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800000L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 71);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 110, 71);
         else if ((active3 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 246, 71);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000004000000000L, active2, 0L, active3, 0x21000001000L, active4, 0L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L, active2, 0x20000000L, active3, 0x800000002080L, active4, 0L, active5, 0L, active6, 0L);
      case 82:
      case 114:
         if ((active3 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 221, 71);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x6000L, active3, 0x10000L, active4, 0x40L, active5, 0L, active6, 0x6L);
      case 83:
      case 115:
         if ((active3 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 196, 71);
         else if ((active3 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 247, 71);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x100L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 71);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 71);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 71);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 109, 71);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 166, 71);
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L, active2, 0x4L, active3, 0x800000000L, active4, 0L, active5, 0L, active6, 0x80L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x40L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3, active4, active5, active6);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L, active4, 0x4000000L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L, active2, 0x6000L, active3, 0L, active4, 0x8000000L, active5, 0L, active6, 0xeL);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x202L, active2, 0L, active3, 0L, active4, 0x8L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active4 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 272, 71);
         break;
      case 69:
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 82, 71);
         else if ((active3 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 208, 71);
         else if ((active3 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 217, 71);
         else if ((active3 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 224, 71);
         else if ((active4 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 284, 71);
         else if ((active5 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 326, 71);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1800L, active3, 0x804000000L, active4, 0L, active5, 0L, active6, 0x80L);
      case 71:
      case 103:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 102, 71);
         else if ((active3 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 204, 71);
         else if ((active3 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 228, 71);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0x1000000L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L, active2, 0L, active3, 0L, active4, 0x4000000000000L, active5, 0L, active6, 0L);
      case 77:
      case 109:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 9, 71);
         break;
      case 78:
      case 110:
         if ((active3 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 199, 71);
         else if ((active3 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 205, 71);
         return jjMoveStringLiteralDfa9_0(active0, 0x80080000000000L, active1, 0x8000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0x20000L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x800000L, active6, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 71);
         else if ((active3 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 239, 71);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x10L);
      case 83:
      case 115:
         if ((active4 & 0x100000000000L) != 0L)
            return jjStopAtPos(8, 300);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x100L);
      case 84:
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 71);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 127, 71);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 132, 71);
         else if ((active3 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 233, 71);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x10000000000000L, active3, 0L, active4, 0L, active5, 0x80000L, active6, 0x40L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x1800000000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 89:
      case 121:
         if ((active4 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 262, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3, active4, active5, active6);
      return 9;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000000000L, active2, 0x1800L, active3, 0L, active4, 0x8000000L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x80L);
      case 69:
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 67, 71);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 175, 71);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 176, 71);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 180, 71);
         else if ((active4 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 259, 71);
         else if ((active5 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 326, 71);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x40L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0x4000000L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x20000000L, active3, 0L, active4, 0x4000000000000L, active5, 0L, active6, 0x100L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x6L);
      case 78:
      case 110:
         if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 216, 71);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0x8L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 83:
      case 115:
         if ((active3 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 218, 71);
         break;
      case 84:
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 71);
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(9, 73, 71);
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active1, 0L, active2, 0L, active3, 0L, active4, 0L, active5, 0x820000L, active6, 0L);
      case 89:
      case 121:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0L, active2, 0x4000L, active3, 0L, active4, 0L, active5, 0L, active6, 0x10L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x100000000L, active3, 0L, active4, 0L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2, active3, active4, active5, active6);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2, old3, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, 0L, active4, active5, active6);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x9eL);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000000000L, active2, 0x4000L, active4, 0L, active5, 0L, active6, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active5, 0L, active6, 0x40L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2L, active2, 0x100000000L, active4, 0L, active5, 0L, active6, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x8000000L, active5, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L, active1, 0x40000000000000L, active2, 0L, active4, 0L, active5, 0L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x4L, active4, 0x4000000L, active5, 0L, active6, 0x100L);
      case 83:
      case 115:
         if ((active5 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(10, 326, 71);
         break;
      case 84:
      case 116:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x20001000L, active4, 0L, active5, 0L, active6, 0L);
      case 90:
      case 122:
         if ((active5 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(10, 63, 351);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x4000000000000L, active5, 0L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2, 0L, active4, active5, active6);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old5, long active5, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active5 &= old5) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2, 0L, old4, old5, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, 0L, active4, 0L, active6);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x40L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x1000L, active4, 0L, active6, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x2L, active2, 0L, active4, 0L, active6, 0L);
      case 68:
      case 100:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(11, 160, 71);
         break;
      case 69:
      case 101:
         if ((active4 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 283, 71);
         else if ((active4 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 306, 71);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x10L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4000L, active4, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4L, active4, 0L, active6, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x6L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x8L);
      case 78:
      case 110:
         if ((active6 & 0x100L) != 0L)
            return jjStopAtPos(11, 392);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L, active1, 0L, active2, 0L, active4, 0L, active6, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active4, 0L, active6, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x80L);
      case 84:
      case 116:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 115, 71);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active4, 0L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x4000000L, active6, 0L);
      case 89:
      case 121:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 157, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, 0L, active4, 0L, active6);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x6L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x80L);
      case 71:
      case 103:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(12, 142, 71);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0x1000L, active4, 0L, active6, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2L, active2, 0L, active4, 0L, active6, 0L);
      case 78:
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(12, 22, 71);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(12, 130, 71);
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x4000000L, active6, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active4, 0L, active6, 0x8L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x40L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x10L);
      case 89:
      case 121:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 118, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, active2, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(11, old0, old1, old2, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2, 0L, active4, 0L, active6);
      return 13;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0x4000000L, active6, 0x8L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x40L);
      case 71:
      case 103:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(13, 140, 71);
         break;
      case 78:
      case 110:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(13, 65, 71);
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x6L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active4, 0L, active6, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x10L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0L, active2, 0L, active4, 0L, active6, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, active2, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old4, long active4, long old6, long active6){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(12, old0, old1, old2, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, 0L, 0L, active4, 0L, active6);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0x4000000L, active6, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active6, 0x10L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active6, 0x40L);
      case 69:
      case 101:
         if ((active6 & 0x8L) != 0L)
            return jjStopAtPos(14, 387);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active6, 0x6L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active4, 0L, active6, 0x80L);
      case 84:
      case 116:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(14, 54, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, 0L, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old4, long active4, long old6, long active6){
   if (((active0 &= old0) | (active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(13, old0, 0L, 0L, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, 0L, 0L, active4, 0L, active6);
      return 15;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active6, 0x80L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active6, 0x10L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active6, 0x40L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active4, 0x4000000L, active6, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa16_0(active4, 0L, active6, 0x6L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, 0L, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa16_0(long old4, long active4, long old6, long active6){
   if (((active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, 0L, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, 0L, 0L, active4, 0L, active6);
      return 16;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active4, 0L, active6, 0x6L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active4, 0x4000000L, active6, 0x80L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active4, 0L, active6, 0x10L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa17_0(active4, 0L, active6, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, 0L, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa17_0(long old4, long active4, long old6, long active6){
   if (((active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, 0L, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, 0L, 0L, active4, 0L, active6);
      return 17;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active6, 0x40L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active6, 0x6L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active4, 0L, active6, 0x10L);
      case 78:
      case 110:
         if ((active6 & 0x80L) != 0L)
            return jjStopAtPos(17, 391);
         break;
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_0(active4, 0x4000000L, active6, 0L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, 0L, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa18_0(long old4, long active4, long old6, long active6){
   if (((active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, 0L, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, 0L, 0L, active4, 0L, active6);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active6, 0x6L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active6, 0x10L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa19_0(active4, 0L, active6, 0x40L);
      case 83:
      case 115:
         if ((active4 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(18, 282, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, 0L, 0L, active4, 0L, active6);
}
private int jjMoveStringLiteralDfa19_0(long old4, long active4, long old6, long active6){
   if (((active4 &= old4) | (active6 &= old6)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, 0L, 0L, old4, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active6, 0x6L);
      case 78:
      case 110:
         if ((active6 & 0x10L) != 0L)
            return jjStopAtPos(19, 388);
         break;
      case 89:
      case 121:
         if ((active6 & 0x40L) != 0L)
            return jjStopAtPos(19, 390);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa20_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(18, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 20;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa21_0(active6, 0x6L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa21_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(19, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 21;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active6, 0x6L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa22_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 22;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa23_0(active6, 0x6L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa23_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 23;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active6 & 0x2L) != 0L)
         {
            jjmatchedKind = 385;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa24_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 24;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa25_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa25_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 25;
   }
   switch(curChar)
   {
      case 87:
      case 119:
         return jjMoveStringLiteralDfa26_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa26_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 26;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa27_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa27_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(25, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 27;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa28_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa28_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(26, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 28;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         return jjMoveStringLiteralDfa29_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa29_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(27, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 29;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa30_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(28, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa30_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(28, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 30;
   }
   switch(curChar)
   {
      case 81:
      case 113:
         return jjMoveStringLiteralDfa31_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(29, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa31_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(29, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 31;
   }
   switch(curChar)
   {
      case 85:
      case 117:
         return jjMoveStringLiteralDfa32_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(30, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa32_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(30, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 32;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa33_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(31, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa33_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(31, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 33;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa34_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(32, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa34_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(32, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 34;
   }
   switch(curChar)
   {
      case 89:
      case 121:
         return jjMoveStringLiteralDfa35_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(33, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa35_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(33, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 35;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa36_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(34, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa36_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(34, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 36;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa37_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(35, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa37_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(35, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 37;
   }
   switch(curChar)
   {
      case 88:
      case 120:
         return jjMoveStringLiteralDfa38_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(36, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa38_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(36, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 38;
   }
   switch(curChar)
   {
      case 80:
      case 112:
         return jjMoveStringLiteralDfa39_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(37, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa39_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(37, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 39;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa40_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(38, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa40_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(38, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 40;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa41_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(39, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa41_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(39, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 41;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa42_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(40, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa42_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(40, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 42;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa43_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(41, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa43_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(41, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 43;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa44_0(active6, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(42, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjMoveStringLiteralDfa44_0(long old6, long active6){
   if (((active6 &= old6)) == 0L)
      return jjStartNfa_0(42, 0L, 0L, 0L, 0L, 0L, 0L, old6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, 0L, 0L, 0L, 0L, 0L, 0L, active6);
      return 44;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active6 & 0x4L) != 0L)
            return jjStopAtPos(44, 386);
         break;
      default :
         break;
   }
   return jjStartNfa_0(43, 0L, 0L, 0L, 0L, 0L, 0L, active6);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec31 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec36 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec38 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec39 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec40 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec43 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec44 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec45 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec46 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec47 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec48 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec49 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec50 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec51 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec52 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec53 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec54 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec55 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec56 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec57 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec58 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec59 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec60 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec61 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec62 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 344;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
               case 71:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 226:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 38:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 14:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 25:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 5:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 36:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 272:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 344:
               case 98:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 275:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 67:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(44, 45); }
                  else if (curChar == 45)
                  {
                     if (kind > 324)
                        kind = 324;
                     { jjCheckNAdd(68); }
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 312)
                        kind = 312;
                  }
                  break;
               case 178:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 108:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 130:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 291:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 281:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  else if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  else if (curChar == 40)
                     { jjCheckNAdd(141); }
                  break;
               case 218:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 179:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 23:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 3:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 34:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 350:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 216:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 41:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 349:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(320, 321); }
                  else if (curChar == 62)
                  {
                     if (kind > 315)
                        kind = 315;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 314)
                        kind = 314;
                  }
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(318, 319); }
                  break;
               case 348:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  else if (curChar == 61)
                  {
                     if (kind > 313)
                        kind = 313;
                  }
                  break;
               case 227:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 228:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(263, 262); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(252, 251); }
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(240, 239); }
                  break;
               case 225:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 274:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 126:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 345:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(4, 9); }
                  break;
               case 109:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 136:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 271:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 135:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 280:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 39:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 200:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 15:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 26:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 6:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 37:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 270:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 276:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  else if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  else if (curChar == 40)
                     { jjCheckNAdd(141); }
                  break;
               case 242:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 220:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(4, 9); }
                  break;
               case 241:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 273:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 131:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 292:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 244:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 290:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 219:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 243:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 13:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 24:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 217:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 335:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(337, 338); }
                  else if (curChar == 47)
                  {
                     if (kind > 324)
                        kind = 324;
                     { jjCheckNAdd(68); }
                  }
                  break;
               case 343:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(4, 9); }
                  break;
               case 22:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 107:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  else if (curChar == 32)
                     { jjCheckNAddTwoStates(112, 120); }
                  break;
               case 129:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 40:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 277:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 127:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 110:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddStates(4, 9); }
                  break;
               case 346:
               case 53:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(53, 54); }
                  break;
               case 60:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAdd(61); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 320)
                        kind = 320;
                     { jjCheckNAddStates(10, 16); }
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x1800000000L & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(17, 18); }
                  else if (curChar == 60)
                     { jjCheckNAddStates(19, 22); }
                  else if (curChar == 39)
                     { jjCheckNAddStates(4, 9); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(87, 88); }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 67;
                  else if (curChar == 46)
                     { jjCheckNAdd(56); }
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(50, 51); }
                  else if (curChar == 62)
                     { jjCheckNAddTwoStates(47, 48); }
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 89;
                  else if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 64;
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 347:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 51); }
                  else if (curChar == 61)
                  {
                     if (kind > 316)
                        kind = 316;
                  }
                  break;
               case 351:
                  if ((0x3ff00180fffc1ffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  else if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  else if (curChar == 40)
                     { jjCheckNAdd(141); }
                  break;
               case 295:
                  if ((0x3ff00180fffc1ffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 43:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 44:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 45:
                  if (curChar == 62 && kind > 312)
                     kind = 312;
                  break;
               case 46:
                  if (curChar == 62)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 47:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(47, 48); }
                  break;
               case 48:
                  if (curChar == 61 && kind > 313)
                     kind = 313;
                  break;
               case 49:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(50, 51); }
                  break;
               case 50:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(50, 51); }
                  break;
               case 51:
                  if (curChar == 61 && kind > 316)
                     kind = 316;
                  break;
               case 55:
                  if (curChar == 46)
                     { jjCheckNAdd(56); }
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAddTwoStates(56, 57); }
                  break;
               case 58:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(59); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(59); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(61, 62); }
                  break;
               case 62:
                  if (curChar == 39 && kind > 322)
                     kind = 322;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 66:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 68:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 324)
                     kind = 324;
                  { jjCheckNAdd(68); }
                  break;
               case 69:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 70:
                  if ((0x1800000000L & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 73:
                  if (curChar == 39)
                     { jjCheckNAddStates(4, 9); }
                  break;
               case 75:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 76:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 77:
                  if (curChar == 39 && kind > 329)
                     kind = 329;
                  break;
               case 78:
                  if (curChar == 39)
                     { jjCheckNAddStates(26, 28); }
                  break;
               case 79:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddStates(26, 28); }
                  break;
               case 81:
                  if (curChar == 56)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 86:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(87, 88); }
                  break;
               case 87:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(87, 88); }
                  break;
               case 88:
                  if (curChar == 34 && kind > 330)
                     kind = 330;
                  break;
               case 89:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(90, 92); }
                  break;
               case 90:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(90, 92); }
                  break;
               case 91:
                  if (curChar == 36 && kind > 330)
                     kind = 330;
                  break;
               case 92:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 95:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjAddStates(29, 30); }
                  break;
               case 102:
                  if (curChar == 32)
                     { jjAddStates(31, 32); }
                  break;
               case 112:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(112, 120); }
                  break;
               case 114:
                  if (curChar == 32)
                     { jjAddStates(33, 34); }
                  break;
               case 140:
                  if (curChar == 40)
                     { jjCheckNAdd(141); }
                  break;
               case 141:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(141, 142); }
                  break;
               case 142:
                  if (curChar == 41)
                     { jjCheckNAddTwoStates(143, 144); }
                  break;
               case 143:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(143, 144); }
                  break;
               case 146:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(35, 38); }
                  break;
               case 147:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(147, 162); }
                  break;
               case 149:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(149, 158); }
                  break;
               case 151:
                  if ((0x100002600L & l) != 0L)
                     { jjAddStates(39, 40); }
                  break;
               case 171:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 230:
                  if (curChar == 41 && kind > 263)
                     kind = 263;
                  break;
               case 231:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 240:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(240, 239); }
                  break;
               case 252:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(252, 251); }
                  break;
               case 263:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(263, 262); }
                  break;
               case 317:
                  if (curChar == 60)
                     { jjCheckNAddStates(19, 22); }
                  break;
               case 318:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(318, 319); }
                  break;
               case 319:
                  if (curChar == 61 && kind > 314)
                     kind = 314;
                  break;
               case 320:
                  if ((0x100002600L & l) != 0L)
                     { jjCheckNAddTwoStates(320, 321); }
                  break;
               case 321:
                  if (curChar == 62 && kind > 315)
                     kind = 315;
                  break;
               case 322:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 320)
                     kind = 320;
                  { jjCheckNAddStates(10, 16); }
                  break;
               case 323:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(323, 55); }
                  break;
               case 324:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(324, 325); }
                  break;
               case 325:
                  if (curChar != 46)
                     break;
                  if (kind > 319)
                     kind = 319;
                  jjstateSet[jjnewStateCnt++] = 326;
                  break;
               case 327:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(328); }
                  break;
               case 328:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(328); }
                  break;
               case 329:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(329, 330); }
                  break;
               case 331:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(332); }
                  break;
               case 332:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 319)
                     kind = 319;
                  { jjCheckNAdd(332); }
                  break;
               case 333:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 320)
                     kind = 320;
                  { jjCheckNAdd(333); }
                  break;
               case 334:
                  if (curChar == 47)
                     { jjAddStates(17, 18); }
                  break;
               case 336:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(337, 338); }
                  break;
               case 337:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(337, 338); }
                  break;
               case 338:
                  if (curChar == 42)
                     { jjCheckNAddStates(41, 43); }
                  break;
               case 339:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(340, 338); }
                  break;
               case 340:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(340, 338); }
                  break;
               case 341:
                  if (curChar == 47 && kind > 325)
                     kind = 325;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 226:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  else if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  else if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 256;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 38:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 14:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 25:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 5:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAdd(1); }
                  break;
               case 36:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x200000002000000L & l) != 0L)
                  {
                     if (kind > 287)
                        kind = 287;
                  }
                  break;
               case 272:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 308;
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAddStates(44, 46); }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  if ((0x1000000010000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  break;
               case 344:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(98, 99); }
                  else if (curChar == 93)
                  {
                     if (kind > 330)
                        kind = 330;
                  }
                  break;
               case 275:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 311;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 301;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 178:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  if ((0x100000001000L & l) != 0L)
                  {
                     if (kind > 235)
                        kind = 235;
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 108:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 130:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 291:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 281:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(47, 48); }
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 307;
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 218:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 179:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 195;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 23:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 3:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 34:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 350:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(44, 46); }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  break;
               case 216:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 215;
                  break;
               case 41:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 227:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(49, 50); }
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(51, 52); }
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(53, 54); }
                  break;
               case 228:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 262;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 251;
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 225:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 274:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 310;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 300;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 126:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 345:
               case 71:
                  if ((0x87fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 109:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 136:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 271:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 315;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 295;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 305;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 297;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 278;
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 135:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(139); }
                  else if ((0x200000002000000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(134); }
                  break;
               case 280:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x400000004000000L & l) != 0L)
                     { jjCheckNAddStates(44, 46); }
                  if ((0x400000004000000L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  break;
               case 39:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 200:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 207;
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 15:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 26:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 6:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 37:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 270:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 314;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 304;
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(139); }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 287;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 277;
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(134); }
                  break;
               case 276:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(47, 48); }
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 312;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 302;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 285;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 275;
                  break;
               case 242:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 264;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 253;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 220:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 219;
                  else if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                  }
                  break;
               case 241:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 246;
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 273:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 309;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 299;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 131:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 292:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 244:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 266;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 255;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 290:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 257)
                        kind = 257;
                  }
                  break;
               case 219:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 243:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 265;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 13:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 24:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 217:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 343:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x400000004L & l) != 0L)
                     { jjCheckNAdd(73); }
                  else if ((0x4000000040000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                  }
                  else if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                  }
                  break;
               case 22:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 107:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 129:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 40:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 277:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 313;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 303;
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(44, 46); }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 286;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 276;
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  break;
               case 127:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 110:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 346:
               case 54:
                  if (curChar == 124 && kind > 317)
                     kind = 317;
                  break;
               case 60:
                  if ((0x87fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  else if (curChar == 91)
                     { jjCheckNAddTwoStates(98, 99); }
                  else if (curChar == 96)
                     { jjCheckNAdd(95); }
                  else if (curChar == 124)
                     { jjAddStates(55, 56); }
                  if ((0x24402400244024L & l) != 0L)
                     { jjCheckNAdd(73); }
                  else if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(57, 64); }
                  else if ((0x800000008L & l) != 0L)
                     { jjCheckNAddStates(65, 69); }
                  else if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(70, 75); }
                  else if ((0x1000000010L & l) != 0L)
                     { jjAddStates(76, 78); }
                  else if ((0x200000002000L & l) != 0L)
                     { jjAddStates(79, 80); }
                  else if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 84;
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAddStates(81, 83); }
                  else if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAddTwoStates(211, 220); }
                  else if ((0x400000004000L & l) != 0L)
                     { jjAddStates(84, 85); }
                  break;
               case 351:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(47, 48); }
                  break;
               case 295:
                  if ((0x87fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 326)
                        kind = 326;
                     { jjCheckNAdd(71); }
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 294;
                  break;
               case 1:
                  if ((0x4000000040000L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 2:
                  if ((0x200000002L & l) != 0L)
                     { jjCheckNAdd(1); }
                  break;
               case 4:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x200000002000000L & l) != 0L && kind > 236)
                     kind = 236;
                  break;
               case 9:
               case 18:
               case 187:
               case 212:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(8); }
                  break;
               case 10:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 17:
                  if ((0x40000000400L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 27:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x400000004000L & l) != 0L && kind > 287)
                     kind = 287;
                  break;
               case 29:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 35:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 42:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 52:
                  if (curChar == 124)
                     { jjAddStates(55, 56); }
                  break;
               case 57:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(86, 87); }
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjAddStates(88, 89); }
                  break;
               case 63:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 64:
                  if ((0x100000001000000L & l) != 0L)
                     { jjCheckNAdd(65); }
                  break;
               case 65:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 322)
                     kind = 322;
                  { jjCheckNAdd(65); }
                  break;
               case 68:
                  if (kind > 324)
                     kind = 324;
                  jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 72:
                  if ((0x24402400244024L & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 74:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x14404410144044L & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 76:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 80:
                  { jjCheckNAddStates(26, 28); }
                  break;
               case 82:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 87:
                  { jjAddStates(90, 91); }
                  break;
               case 90:
                  { jjAddStates(92, 93); }
                  break;
               case 94:
                  if (curChar == 96)
                     { jjCheckNAdd(95); }
                  break;
               case 95:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(95, 96); }
                  break;
               case 96:
                  if (curChar == 96 && kind > 330)
                     kind = 330;
                  break;
               case 97:
                  if (curChar == 91)
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 98:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 99:
                  if (curChar == 93 && kind > 330)
                     kind = 330;
                  break;
               case 100:
                  if ((0x400000004000L & l) != 0L)
                     { jjAddStates(84, 85); }
                  break;
               case 101:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 103:
                  if ((0x4000000040000L & l) != 0L && kind > 169)
                     kind = 169;
                  break;
               case 104:
               case 115:
                  if ((0x800000008000L & l) != 0L)
                     { jjCheckNAdd(103); }
                  break;
               case 105:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 111:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 113:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 118:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 122:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x200000002000L & l) != 0L)
                     { jjAddStates(79, 80); }
                  break;
               case 124:
                  if ((0x10000000100L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 125:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 128:
                  if ((0x2000000020L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 132:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if ((0x1000000010L & l) != 0L)
                     { jjAddStates(76, 78); }
                  break;
               case 134:
                  if ((0x2000000020L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 137:
                  if ((0x200000002000000L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 138:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x2000000020L & l) != 0L)
                     { jjCheckNAddStates(44, 46); }
                  break;
               case 144:
                  if ((0x80000000800000L & l) != 0L)
                     { jjAddStates(47, 48); }
                  break;
               case 145:
                  if ((0x10000000100L & l) != 0L)
                     { jjCheckNAdd(146); }
                  break;
               case 148:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 150:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 152:
                  if ((0x2000000020L & l) != 0L && kind > 318)
                     kind = 318;
                  break;
               case 153:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 157:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 160:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 164:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(146); }
                  break;
               case 166:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 172:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(139); }
                  break;
               case 173:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if ((0x8000000080000L & l) != 0L)
                     { jjAddStates(70, 75); }
                  break;
               case 175:
                  if ((0x1000000010L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 176:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 180:
                  if ((0x10000000100000L & l) != 0L && kind > 235)
                     kind = 235;
                  break;
               case 181:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 185:
                  if ((0x100000001000L & l) != 0L && kind > 235)
                     kind = 235;
                  break;
               case 186:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 188:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 191:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if ((0x4000000040000L & l) != 0L && kind > 287)
                     kind = 287;
                  break;
               case 198:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 201:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if ((0x8000000080L & l) != 0L && kind > 287)
                     kind = 287;
                  break;
               case 203:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 204:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 205:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if ((0x20000000200000L & l) != 0L)
                     { jjCheckNAddTwoStates(211, 220); }
                  break;
               case 211:
                  if ((0x4000000040000L & l) != 0L && kind > 97)
                     kind = 97;
                  break;
               case 213:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 215:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 221:
                  if ((0x800000008L & l) != 0L)
                     { jjCheckNAddStates(65, 69); }
                  break;
               case 222:
                  if ((0x8000000080000L & l) != 0L && kind > 97)
                     kind = 97;
                  break;
               case 223:
                  if ((0x8000000080000L & l) != 0L && kind > 257)
                     kind = 257;
                  break;
               case 224:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 229:
                  if ((0x1000000010000L & l) == 0L)
                     break;
                  if (kind > 263)
                     kind = 263;
                  { jjCheckNAdd(231); }
                  break;
               case 232:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 233:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 234:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 235:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 236:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 238:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 239:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 245:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(51, 52); }
                  break;
               case 247:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 248:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 263)
                     kind = 263;
                  { jjCheckNAdd(231); }
                  break;
               case 249:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(248); }
                  break;
               case 250:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 253:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 254:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 255:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 257:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 258:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(49, 50); }
                  break;
               case 259:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 260:
                  if ((0x10000000100000L & l) != 0L)
                     { jjCheckNAdd(248); }
                  break;
               case 261:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 262:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 264:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 265:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 269:
                  if ((0x10000000100000L & l) != 0L)
                     { jjAddStates(57, 64); }
                  break;
               case 278:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 279:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 282:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 283:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 284:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 285:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 286:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 287:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 288:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 289:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 293:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 294:
                  if ((0x200000002000L & l) != 0L && kind > 287)
                     kind = 287;
                  break;
               case 296:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 295;
                  break;
               case 297:
                  if ((0x200000002000L & l) != 0L)
                     { jjCheckNAdd(139); }
                  break;
               case 298:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 299:
                  if ((0x1000000010000L & l) != 0L)
                     { jjCheckNAddStates(44, 46); }
                  break;
               case 300:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 301:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 300;
                  break;
               case 302:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 301;
                  break;
               case 303:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 302;
                  break;
               case 304:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 303;
                  break;
               case 305:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 304;
                  break;
               case 306:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 305;
                  break;
               case 307:
                  if ((0x400000004000000L & l) != 0L)
                     { jjCheckNAddStates(44, 46); }
                  break;
               case 308:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 309:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 308;
                  break;
               case 310:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 309;
                  break;
               case 311:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 310;
                  break;
               case 312:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 311;
                  break;
               case 313:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 312;
                  break;
               case 314:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 313;
                  break;
               case 315:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 314;
                  break;
               case 316:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 315;
                  break;
               case 326:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(94, 95); }
                  break;
               case 330:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(96, 97); }
                  break;
               case 337:
                  { jjCheckNAddTwoStates(337, 338); }
                  break;
               case 339:
               case 340:
                  { jjCheckNAddTwoStates(340, 338); }
                  break;
               case 342:
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAddStates(81, 83); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
               case 71:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 226:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 38:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 14:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 25:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 5:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 36:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 272:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 344:
               case 98:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 275:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 178:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 108:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 130:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 291:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 281:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 218:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 179:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 23:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 3:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 34:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 350:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 216:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 41:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 227:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 228:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 225:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 274:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 126:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 345:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 109:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 136:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 271:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 135:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 280:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 39:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 200:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 15:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 26:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 6:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 37:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 270:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 276:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 242:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 220:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 241:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 273:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 131:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 292:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 244:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 290:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 219:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 243:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 13:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 24:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 217:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 343:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 22:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 107:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 129:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 40:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 277:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 127:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 110:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 60:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 351:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 295:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 326)
                     kind = 326;
                  { jjCheckNAdd(71); }
                  break;
               case 68:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 324)
                     kind = 324;
                  jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 76:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(23, 25); }
                  break;
               case 80:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(26, 28); }
                  break;
               case 87:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(90, 91); }
                  break;
               case 90:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(92, 93); }
                  break;
               case 95:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(29, 30); }
                  break;
               case 337:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(337, 338); }
                  break;
               case 339:
               case 340:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(340, 338); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 344 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\46\46", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\54", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\75\76", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\73", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\75", "\56", "\72", null, null, null, null, null, null, null, null, null, 
"\52", "\77", "\41", "\53", "\76", "\74", "\100\100", "\176", "\176\52", "\41\176", 
"\41\176\52", "\100\76", "\74\100", "\77\174", "\77\46", "\55", "\55\43", "\74\55\76", 
"\74\43\76", "\72\75", "\174", "\46", "\74\74", "\76\76", "\57", "\45", "\136", "\133", 
"\135", null, "\175", null, null, "\72\72", "\100", "\55\76", "\55\76\76", "\43\76", 
"\43\76\76", null, null, null, null, "\173", null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   140, 143, 144, 171, 74, 76, 77, 79, 80, 77, 323, 55, 324, 325, 329, 330, 
   333, 335, 336, 318, 319, 320, 321, 74, 76, 77, 79, 80, 77, 95, 96, 102, 
   105, 114, 116, 147, 162, 149, 158, 151, 155, 338, 339, 341, 140, 144, 171, 164, 
   170, 259, 263, 247, 252, 228, 240, 53, 54, 271, 279, 289, 293, 296, 298, 306, 
   316, 222, 226, 245, 257, 268, 179, 184, 186, 196, 201, 209, 136, 138, 173, 127, 
   132, 222, 211, 343, 110, 122, 58, 59, 61, 62, 87, 88, 90, 92, 327, 328, 
   331, 332, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec40[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec61[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec62[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 330 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      if ( !configuration.getAsBoolean(Feature.allowSquareBracketQuotation) && matchedToken.image.charAt(0) == '[' ) {
         matchedToken.image = "[";
         for (int i=0;i<CCJSqlParserConstants.tokenImage.length;i++) {
            if (CCJSqlParserConstants.tokenImage[i].equals("\"[\"")) {
                matchedToken.kind = i;
            }
         }
         input_stream.backup(image.length() - 1);
       }
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CCJSqlParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new RuntimeException("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CCJSqlParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 344; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffffdL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 
   0xffffffffffffffffL, 0xfffffffffffff645L, 0x1ffL, 
};
static final long[] jjtoSkip = {
   0x2L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x30L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x30L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[344];
    private final int[] jjstateSet = new int[2 * 344];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
